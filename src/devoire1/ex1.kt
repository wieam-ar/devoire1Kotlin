// Classe de base Personne

open class Personne(var nom: String, var prenom: String, var email: String) {
    open fun afficherInfos() {
        println("üë§ Nom : $nom $prenom | Email : $email")
    }
}

/*
Cette classe repr√©sente une personne dans le syst√®me.
Elle contient les propri√©t√©s nom, prenom et email, et une m√©thode afficherInfos() qui montre les informations de la personne √† l‚Äô√©cran.
C‚Äôest la classe de base dont d‚Äôautres classes vont h√©riter.
*/


// Classe Livre

class Livre(
    var titre: String,
    var auteur: String,
    var isbn: String,
    var nombreExemplaires: Int
) {
    fun afficherDetails() {
        println("üìö Livre : $titre | Auteur : $auteur | ISBN : $isbn | Stock : $nombreExemplaires")
    }

    fun disponiblePourEmprunt(): Boolean {
        return nombreExemplaires > 0
    }

    fun mettreAJourStock(nouveauStock: Int) {
        nombreExemplaires = nouveauStock
    }
}

/*
Cette classe repr√©sente un livre avec son titre, auteur, isbn, et nombre d‚Äôexemplaires disponibles.
Elle contient des m√©thodes pour afficher les d√©tails, v√©rifier la disponibilit√© et mettre √† jour le stock lors des emprunts ou des retours.

*/

// Classe Emprunt

class Emprunt(
    val utilisateur: Utilisateur,
    val livre: Livre,
    val dateEmprunt: String,
    var dateRetour: String? = null
) {
    fun afficherDetails() {
        println("üìñ Emprunt - Utilisateur : ${utilisateur.nom} ${utilisateur.prenom}, " +
                "Livre : ${livre.titre}, " +
                "Date d'emprunt : $dateEmprunt, " +
                "Date de retour : ${dateRetour ?: "Non encore retourn√©"}")
    }

    fun retournerLivre(dateRetour: String) {
        this.dateRetour = dateRetour
        livre.mettreAJourStock(livre.nombreExemplaires + 1)
        println("‚úÖ Livre '${livre.titre}' retourn√© le $dateRetour par ${utilisateur.nom}.")
    }
}

/*
Cette classe relie un utilisateur √† un livre et contient les dates d‚Äôemprunt et de retour.
Elle poss√®de la m√©thode afficherDetails() pour montrer les informations sur l‚Äôemprunt, et retournerLivre() pour enregistrer le retour du livre et remettre √† jour le stock.

 */

// Classe Utilisateur (h√©rite de Personne)

class Utilisateur(
    var idUtilisateur: Int,
    nom: String,
    prenom: String,
    email: String
) : Personne(nom, prenom, email) {

    val emprunts = mutableListOf<Emprunt>()

    fun emprunterLivre(livre: Livre, dateEmprunt: String) {
        if (livre.disponiblePourEmprunt()) {
            livre.mettreAJourStock(livre.nombreExemplaires - 1)
            val emprunt = Emprunt(this, livre, dateEmprunt)
            emprunts.add(emprunt)
            println("üì¶ ${nom} a emprunt√© le livre '${livre.titre}' le $dateEmprunt.")
        } else {
            println("‚ùå Le livre '${livre.titre}' n'est pas disponible pour l'emprunt.")
        }
    }

    fun afficherEmprunts() {
        println("üßæ Emprunts de $nom $prenom :")
        if (emprunts.isEmpty()) {
            println("Aucun emprunt trouv√©.")
        } else {
            emprunts.forEach { it.afficherDetails() }
        }
    }
}

/*
L‚Äôutilisateur h√©rite de Personne et ajoute deux nouvelles propri√©t√©s :
idUtilisateur (identifiant unique) et emprunts (liste des livres emprunt√©s).
Il poss√®de la m√©thode emprunterLivre() pour emprunter un livre, et afficherEmprunts() pour afficher tous les livres qu‚Äôil a emprunt√©s.
*/

// Classe abstraite GestionBibliotheque

abstract class GestionBibliotheque {
    val utilisateurs = mutableListOf<Utilisateur>()
    val livres = mutableListOf<Livre>()

    abstract fun ajouterUtilisateur(utilisateur: Utilisateur)
    abstract fun ajouterLivre(livre: Livre)
    abstract fun afficherTousLesLivres()
}

/*
C‚Äôest une classe de base pour g√©rer les livres et les utilisateurs de la biblioth√®que.
Elle contient les listes utilisateurs et livres, et d√©clare les m√©thodes abstraites ajouterUtilisateur(), ajouterLivre(), et afficherTousLesLivres().
Elle ne peut pas √™tre instanci√©e directement.*/



// Classe Bibliotheque qui h√©rite de GestionBibliotheque

class Bibliotheque : GestionBibliotheque() {

    override fun ajouterUtilisateur(utilisateur: Utilisateur) {
        utilisateurs.add(utilisateur)
        println("üë• Utilisateur ajout√© : ${utilisateur.nom} ${utilisateur.prenom}")
    }

    override fun ajouterLivre(livre: Livre) {
        livres.add(livre)
        println("üìò Livre ajout√© : ${livre.titre}")
    }

    override fun afficherTousLesLivres() {
        println("\nüìö Liste des livres dans la biblioth√®que :")
        if (livres.isEmpty()) {
            println("Aucun livre disponible.")
        } else {
            livres.forEach { it.afficherDetails() }
        }
    }

    fun rechercherLivreParTitre(titre: String): Livre? {
        return livres.find { it.titre.equals(titre, ignoreCase = true) }
    }
}

/*
Cette classe h√©rite de GestionBibliotheque et impl√©mente toutes ses m√©thodes.
Elle ajoute une fonction rechercherLivreParTitre() pour retrouver un livre √† partir de son titre.
C‚Äôest la classe principale qui g√®re toute la biblioth√®que.
*/

// ---------------------------
// PROGRAMME PRINCIPAL
// ---------------------------


fun main() {
    val bibliotheque = Bibliotheque()

    // Cr√©ation des livres
    val livre1 = Livre("Kotlin pour D√©butants", "Jean Dupont", "ISBN123", 3)
    val livre2 = Livre("Programmation Android", "Marie Curie", "ISBN456", 2)
    val livre3 = Livre("Intelligence Artificielle", "Albert Turing", "ISBN789", 1)

    //Ajout des livres √† la biblioth√®que
    bibliotheque.ajouterLivre(livre1)
    bibliotheque.ajouterLivre(livre2)
    bibliotheque.ajouterLivre(livre3)

    // Cr√©ation des utilisateurs
    val user1 = Utilisateur(1, "Wieam", "Aarika", "wieam@example.com")
    val user2 = Utilisateur(2, "Youssef", "Benali", "youssef@example.com")

    // Ajout des utilisateurs √† la biblioth√®que
    bibliotheque.ajouterUtilisateur(user1)
    bibliotheque.ajouterUtilisateur(user2)

    // Emprunt de livres
    user1.emprunterLivre(livre1, "04/10/2025")
    user2.emprunterLivre(livre2, "04/10/2025")
    user1.emprunterLivre(livre3, "04/10/2025")

    // Affichage
    println("\n----- INFOS UTILISATEURS -----")
    user1.afficherInfos()
    user2.afficherInfos()

    println("\n----- LISTE DES LIVRES -----")
    bibliotheque.afficherTousLesLivres()

    println("\n----- EMPRUNTS -----")
    user1.afficherEmprunts()
    user2.afficherEmprunts()

    // 7Ô∏è‚É£ Retour d'un livre
    println("\n----- RETOUR DE LIVRE -----")
    val premierEmprunt = user1.emprunts.first()
    premierEmprunt.retournerLivre("10/10/2025")

    // V√©rification du stock apr√®s retour
    println("\n----- LIVRES APR√àS RETOUR -----")
    bibliotheque.afficherTousLesLivres()
}
/*
Le programme cr√©e plusieurs livres et utilisateurs, les ajoute √† la biblioth√®que, puis simule des emprunts et retours de livres.
Enfin, il affiche les informations de tous les objets (livres, utilisateurs, emprunts) pour v√©rifier le bon fonctionnement du syst√®me.
 */