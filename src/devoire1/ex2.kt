package `devoir 1`

// Exceptions

class VehiculeIndisponibleException(message: String) : Exception(message)
class VehiculeNonTrouveException(message: String) : Exception(message)

// Partie 1 : Classes de base

abstract class Vehicule(
    val immatriculation: String,
    val marque: String,
    val modele: String,
    var kilometrage: Int,
    var disponible: Boolean = true
) {
    open fun afficherDetails() {
        println("Vehicule[$immatriculation] : $marque $modele | km: $kilometrage | disponible: $disponible")
    }

    fun estDisponible(): Boolean = disponible

    fun marquerIndisponible() {
        disponible = false
    }

    fun marquerDisponible() {
        disponible = true
    }

    fun mettreAJourKilometrage(km: Int) {
        if (km >= kilometrage) {
            kilometrage = km
        } else {
            println("‚ö†Ô∏è Le kilom√©trage fourni ($km) est inf√©rieur au kilom√©trage actuel ($kilometrage). Ignor√©.")
        }
    }
}
/*
Cette classe repr√©sente un v√©hicule g√©n√©ral du parc automobile.
Elle contient les propri√©t√©s communes comme l‚Äôimmatriculation, la marque, le mod√®le, le kilom√©trage et la disponibilit√©.
Elle d√©finit aussi des m√©thodes pour afficher les d√©tails, mettre √† jour le kilom√©trage et changer l‚Äô√©tat (disponible ou non).
C‚Äôest une classe abstraite servant de base aux autres types de v√©hicules.
 */

class Voiture(
    immatriculation: String,
    marque: String,
    modele: String,
    kilometrage: Int,
    val nombrePortes: Int,
    val typeCarburant: String,
    disponible: Boolean = true
) : Vehicule(immatriculation, marque, modele, kilometrage, disponible) {
    override fun afficherDetails() {
        println("Voiture[$immatriculation] : $marque $modele | ${nombrePortes} portes | $typeCarburant | km: $kilometrage | dispo: $disponible")
    }
}

/*
La classe Voiture h√©rite de Vehicule et ajoute des propri√©t√©s sp√©cifiques comme le nombre de portes et le type de carburant.
Elle red√©finit la m√©thode afficherDetails() pour afficher les informations d√©taill√©es d‚Äôune voiture.
Elle repr√©sente un v√©hicule √† quatre roues destin√© aux conducteurs classiques.
 */

class Moto(
    immatriculation: String,
    marque: String,
    modele: String,
    kilometrage: Int,
    val cylindree: Int,
    disponible: Boolean = true
) : Vehicule(immatriculation, marque, modele, kilometrage, disponible) {
    override fun afficherDetails() {
        println("Moto[$immatriculation] : $marque $modele | ${cylindree}cc | km: $kilometrage | dispo: $disponible")
    }
}

/*
La classe Moto h√©rite aussi de Vehicule et ajoute la propri√©t√© cylindr√©e exprim√©e en cm¬≥.
Elle red√©finit la m√©thode afficherDetails() pour montrer les caract√©ristiques d‚Äôune moto.
Elle sert √† g√©rer les v√©hicules √† deux roues du parc.
 */

// Partie 2 : Conducteur et Reservation

class Conducteur(val nom: String, val prenom: String, val numeroPermis: String) {
    fun afficherDetails() {
        println("Conducteur : $nom $prenom | Permis : $numeroPermis")
    }
}

class Reservation(
    val vehicule: Vehicule,
    val conducteur: Conducteur,
    val dateDebut: String,
    val dateFin: String,
    val kilometrageDebut: Int,
    var kilometrageFin: Int? = null
) {
    var cloturee: Boolean = false

    fun cloturerReservation(kilometrageRetour: Int) {
        if (cloturee) {
            println("‚ö†Ô∏è Cette r√©servation est d√©j√† cl√¥tur√©e.")
            return
        }
        kilometrageFin = kilometrageRetour
        vehicule.mettreAJourKilometrage(kilometrageRetour)
        vehicule.marquerDisponible()
        cloturee = true
        println("‚úÖ R√©servation cl√¥tur√©e pour ${vehicule.immatriculation} | km retour : $kilometrageRetour")
    }

    fun afficherDetails() {
        println("----- R√©servation -----")
        println("Vehicule : ${vehicule.immatriculation} (${vehicule.marque} ${vehicule.modele})")
        println("Conducteur : ${conducteur.nom} ${conducteur.prenom} (Permis: ${conducteur.numeroPermis})")
        println("P√©riode : $dateDebut -> $dateFin")
        println("Kilom√©trage : d√©but $kilometrageDebut | fin ${kilometrageFin ?: "Non renseign√©"}")
        println("Cl√¥tur√©e : $cloturee")
    }
}

/*
La classe Reservation relie un conducteur √† un v√©hicule sur une p√©riode donn√©e.
Elle garde les dates de d√©but et de fin ainsi que le kilom√©trage avant et apr√®s utilisation.
Elle permet de cl√¥turer une r√©servation en mettant √† jour le v√©hicule et en le rendant disponible.
 */

// Partie 3 : Gestion du parc

class ParcAutomobile {
    val vehicules = mutableListOf<Vehicule>()
    val reservations = mutableListOf<Reservation>()

    fun ajouterVehicule(vehicule: Vehicule) {
        vehicules.add(vehicule)
        println("‚ûï V√©hicule ajout√© : ${vehicule.immatriculation}")
    }

    fun supprimerVehicule(immatriculation: String) {
        val found = vehicules.find { it.immatriculation.equals(immatriculation, ignoreCase = true) }
            ?: throw VehiculeNonTrouveException("Le v√©hicule avec immatriculation $immatriculation n'a pas √©t√© trouv√©.")
        // V√©rifier s'il est r√©serv√© actuellement (indisponible et existe une r√©servation non cl√¥tur√©e)
        val reservationActive = reservations.any { it.vehicule == found && !it.cloturee }
        if (reservationActive) {
            println("‚ö†Ô∏è Suppression impossible : v√©hicule $immatriculation a une r√©servation active.")
            return
        }
        vehicules.remove(found)
        println("‚ûñ V√©hicule supprim√© : $immatriculation")
    }

    fun reserverVehicule(
        immatriculation: String,
        conducteur: Conducteur,
        dateDebut: String,
        dateFin: String
    ): Reservation {
        val vehicule = vehicules.find { it.immatriculation.equals(immatriculation, ignoreCase = true) }
            ?: throw VehiculeNonTrouveException("Le v√©hicule avec immatriculation $immatriculation n'a pas √©t√© trouv√©.")

        if (!vehicule.estDisponible()) {
            throw VehiculeIndisponibleException("Le v√©hicule $immatriculation n'est pas disponible pour r√©servation.")
        }

        // Cr√©er la r√©servation
        val reservation = Reservation(
            vehicule = vehicule,
            conducteur = conducteur,
            dateDebut = dateDebut,
            dateFin = dateFin,
            kilometrageDebut = vehicule.kilometrage
        )
        // Marquer v√©hicule indisponible et stocker la r√©servation
        vehicule.marquerIndisponible()
        reservations.add(reservation)
        println("üìÖ R√©servation cr√©√©e : ${immatriculation} pour ${conducteur.nom} du $dateDebut au $dateFin")
        return reservation
    }

    fun afficherVehiculesDisponibles() {
        println("\n--- V√©hicules disponibles ---")
        val disponibles = vehicules.filter { it.estDisponible() }
        if (disponibles.isEmpty()) {
            println("Aucun v√©hicule disponible.")
        } else {
            disponibles.forEach { it.afficherDetails() }
        }
    }

    fun afficherReservations() {
        println("\n--- Liste des r√©servations ---")
        if (reservations.isEmpty()) {
            println("Aucune r√©servation.")
            return
        }
        reservations.forEach { it.afficherDetails() }
    }
}
/*
Cette classe g√®re tout le syst√®me du parc : les v√©hicules et les r√©servations.
Elle permet d‚Äôajouter ou supprimer un v√©hicule, de r√©server un v√©hicule, d‚Äôafficher les v√©hicules disponibles et de voir toutes les r√©servations.
Elle centralise la gestion globale du parc automobile.
 */
// ---------------------------
// Exemple d'utilisation (main)
// ---------------------------
fun main() {
    val parc = ParcAutomobile()

    // 1) Cr√©er plusieurs v√©hicules (voitures & motos)
    val v1 = Voiture("AA-123-BB", "Renault", "Clio", 45000, nombrePortes = 5, typeCarburant = "essence")
    val v2 = Voiture("CC-456-DD", "Tesla", "Model 3", 12000, nombrePortes = 4, typeCarburant = "√©lectrique")
    val m1 = Moto("EE-789-FF", "Yamaha", "MT-07", 8000, cylindree = 689)
    val m2 = Moto("GG-321-HH", "Honda", "CBR600", 15000, cylindree = 600)

    // Ajouter au parc
    parc.ajouterVehicule(v1)
    parc.ajouterVehicule(v2)
    parc.ajouterVehicule(m1)
    parc.ajouterVehicule(m2)

    // 2) Ajouter conducteurs
    val c1 = Conducteur("Ali", "Ben", "P12345678")
    val c2 = Conducteur("Sara", "Lazaar", "P87654321")
    val c3 = Conducteur("Omar", "Khalid", "P11122233")

    // 3) Faire des r√©servations et g√©rer exceptions
    try {
        val r1 = parc.reserverVehicule("AA-123-BB", c1, "05/10/2025", "10/10/2025")
    } catch (e: Exception) {
        println("Erreur r√©servation : ${e.message}")
    }

    try {
        // Essayer de r√©server le m√™me v√©hicule (devrait lancer VehiculeIndisponibleException)
        val r2 = parc.reserverVehicule("AA-123-BB", c2, "06/10/2025", "07/10/2025")
    } catch (e: VehiculeIndisponibleException) {
        println("Exception: ${e.message}")
    } catch (e: Exception) {
        println("Autre erreur: ${e.message}")
    }

    try {
        // R√©server un v√©hicule non existant (devrait lancer VehiculeNonTrouveException)
        val r3 = parc.reserverVehicule("ZZ-000-ZZ", c3, "01/11/2025", "05/11/2025")
    } catch (e: VehiculeNonTrouveException) {
        println("Exception: ${e.message}")
    }

    // Afficher v√©hicules disponibles apr√®s r√©servations
    parc.afficherVehiculesDisponibles()

    // 4) Afficher toutes les r√©servations
    parc.afficherReservations()

    // 5) Cl√¥turer une r√©servation (mettre km de retour et rendre le v√©hicule disponible)
    // R√©cup√©rer la premi√®re r√©servation non cl√¥tur√©e
    val premiereRes = parc.reservations.firstOrNull { !it.cloturee }
    premiereRes?.let {
        println("\n-- Cl√¥ture de la premi√®re r√©servation --")
        it.cloturerReservation(kilometrageRetour = it.kilometrageDebut + 300)
    }

    // V√©rifier affichage apr√®s cl√¥ture
    parc.afficherVehiculesDisponibles()
    parc.afficherReservations()

    // 6) Tester suppression d'un v√©hicule
    try {
        parc.supprimerVehicule("CC-456-DD") // devrait supprimer Tesla si pas r√©serv√©
    } catch (e: VehiculeNonTrouveException) {
        println("Erreur suppression: ${e.message}")
    }

    // Affichage final
    println("\n--- √âtat final du parc ---")
    parc.vehicules.forEach { it.afficherDetails() }
}

/*
Le programme principal cr√©e plusieurs voitures, motos et conducteurs.
Il ajoute ces √©l√©ments au parc, effectue des r√©servations, g√®re les exceptions et affiche les √©tats du parc avant et apr√®s les op√©rations.
C‚Äôest une d√©monstration pratique du bon fonctionnement du syst√®me orient√© objet.
 */